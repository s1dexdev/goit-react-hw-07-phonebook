{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","redux/contacts-actions.js","redux/contacts-operations.js","redux/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.jsx","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","changeFilter","Axios","defaults","baseURL","dispatch","actions","get","then","data","catch","error","name","number","contact","post","id","delete","getFilter","state","contacts","filter","getItems","items","getVisibleContacts","createSelector","normalizeFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","useDispatch","handleChange","event","currentTarget","value","resetState","className","styles","form","onSubmit","preventDefault","some","item","alert","contactsOperations","labelName","input","type","pattern","title","onChange","btn","disabled","Filter","label","target","ContactList","visibleContacts","useEffect","map","onClick","onDeleteContact","App","createReducer","payload","combineReducers","middleware","getDefaultMiddleware","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.52afa9bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__1Xk4q\",\"item\":\"ContactList_item__3YsZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"labelName\":\"ContactForm_labelName__3V3cS\",\"input\":\"ContactForm_input__gm87B\",\"btn\":\"ContactForm_btn__2Bpnz\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst addContactRequest = createAction('phoneBook/addContactRequest');\nconst addContactSuccess = createAction('phoneBook/addContactSuccess');\nconst addContactError = createAction('phoneBook/addContactError');\n\nconst deleteContactRequest = createAction('phoneBook/deleteContactRequest');\nconst deleteContactSuccess = createAction('phoneBook/deleteContactSuccess');\nconst deleteContactError = createAction('phoneBook/deleteContactError');\n\nconst fetchContactsRequest = createAction('phonebook/fetchContactsRequest');\nconst fetchContactsSuccess = createAction('phonebook/fetchContactsSuccess');\nconst fetchContactsError = createAction('phonebook/fetchContactsError');\n\nconst changeFilter = createAction('phoneBook/filterContacts');\n\nexport default {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  changeFilter,\n};\n","import Axios from 'axios';\nimport actions from './contacts-actions';\n\nAxios.defaults.baseURL = 'http://localhost:3030';\n\nconst fetchContacts = () => dispatch => {\n  dispatch(actions.fetchContactsRequest());\n\n  Axios.get('/contacts')\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\n    .catch(error => dispatch(actions.fetchContactsError(error)));\n};\n\nconst addContact = (name, number) => dispatch => {\n  const contact = { name, number };\n\n  dispatch(actions.addContactRequest());\n\n  Axios.post('/contacts', contact)\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\n    .catch(error => dispatch(actions.addContactError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(actions.deleteContactRequest());\n\n  Axios.delete(`/contacts/${id}`)\n    .then(() => dispatch(actions.deleteContactSuccess(id)))\n    .catch(error => dispatch(actions.deleteContactError(error)));\n};\n\nexport default {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getFilter = state => state.contacts.filter;\nexport const getItems = state => state.contacts.items;\n\nexport const getVisibleContacts = createSelector(\n  [getItems, getFilter],\n  (contacts, filter) => {\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizeFilter),\n    );\n  },\n);\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from '../../redux/contacts-operations';\nimport { getItems } from '../../redux/contacts-selectors';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nconst ContactForm = function () {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const items = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  const onSubmit = (name, number) =>\n    dispatch(contactsOperations.addContact(name, number));\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const resetState = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isAlreadyInContacts = items.some(item => item.name === name);\n\n    if (isAlreadyInContacts) {\n      resetState();\n      return alert(`${name} is already in contacts`);\n    } else {\n      resetState();\n      return onSubmit(name, number);\n    }\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.labelName}>\n        Name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button\n        className={styles.btn}\n        type=\"submit\"\n        disabled={!(name && number) && true}\n      >\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts-actions';\nimport { getFilter } from '../../redux/contacts-selectors';\n\nimport styles from './Filter.module.css';\n\nexport default function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onFilter = event => dispatch(actions.changeFilter(event.target.value));\n\n  return (\n    <label className={styles.label}>\n      Find contacts by name\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onFilter}\n      />\n    </label>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from '../../redux/contacts-operations';\nimport { getVisibleContacts } from '../../redux/contacts-selectors';\nimport styles from './ContactList.module.css';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, []);\n\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li className={styles.item} key={id}>\n          {name}: {number}\n          <button\n            className={styles.btn}\n            type=\"button\"\n            name={id}\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  visibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nconst App = function () {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  filter: PropTypes.string,\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n\nconst {\n  fetchContactsSuccess,\n  addContactSuccess,\n  deleteContactSuccess,\n} = actions;\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (state, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './reducer';\n\nconst middleware = [...getDefaultMiddleware()];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}